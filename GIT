1.Define Git?
Git is a distributed version control system designed to track changes in source code during software development.Git allows multiple developers to work on a project simultaneously without interfering with each other's work.

2.what is Version control System?
Version control systems are software tools that help software teams manage changes to source code over time.

3.what is github?
GitHub is a web-based platform and service that provides hosting for software development projects that use the Git version control system. It offers a wide range of features to facilitate collaboration among developers, project management, code review, and continuous integration.

4.what is git Repository?
A Git repository is a central storage location for managing and tracking changes in files and directories.

5.Git working Process?
1.initialize git repository
2.Adding files
3.Commiting Changes
4.Check the Status using their appriopiate commands.

6.what is .git folder?
.git is a hidden directory in a Git repository that stores all the metadata, configuration, and object database needed for version control. It enables Git to track changes, manage branches, and maintain the history of the project.

Repository:
A repository (repo) is a directory that contains your project's files and the entire history of changes made to those files, managed by Git.

Commit:
A commit is a snapshot of the project's files at a specific point in time. Each commit has a unique ID (SHA-1 hash) and records changes along with a commit message.

Branch:
A branch is a parallel version of the repository, allowing you to work on different lines of development. The default branch is usually called main or master.

Push:
Pushing is the process of sending your committed changes to a remote repository, updating it with your latest work.

Pull:
Pulling is the process of fetching changes from a remote repository and merging them into your local repository.

Merge:
Merging combines changes from different branches into a single branch, integrating the work done separately.

Rebase:
Rebasing is the process of moving or combining a sequence of commits to a new base commit, creating a linear history.

Initialization and Setup
Initialize Repository:

git init: Initializes a new Git repository in the current directory.
Clone Repository:

git clone <repository>: Creates a copy of an existing repository into a new directory.
Configuration:

git config --global user.name "name": Sets the username for all repositories on the system.
git config --global user.email "email": Sets the email for all repositories on the system.
Basic Workflow
Adding Changes:

git add <file>: Stages changes to be included in the next commit.
Committing Changes:

git commit -m "message": Records staged changes to the repository with a descriptive message.
Status and Information:

git status: Displays the state of the working directory and staging area.
git log: Shows the commit history for the repository.
Viewing Differences:

git diff: Displays differences between commits, branches, or the working directory and staging area.
git show <commit>: Displays changes from a specific commit.
Branching and Merging
Branch Management:

git branch: Lists, creates, or deletes branches.
Switching Branches:

git checkout <branch>: Switches to the specified branch and updates the working directory.
git switch <branch>: A newer alternative to git checkout for switching branches.
Merging:

git merge <branch>: Integrates changes from the specified branch into the current branch.
Rebasing:

git rebase <branch>: Reapplies commits on top of another base commit, creating a linear history.
Remote Repositories
Remote Management:

git remote: Manages set of tracked repositories.
Fetching Changes:

git fetch: Downloads objects and refs from another repository without merging.
Pulling Changes:

git pull: Fetches and integrates changes from a remote repository into the current branch.
Pushing Changes:

git push: Updates the remote repository with local commits.
Tags
Creating Tags:
git tag <tagname>: Creates a new tag pointing to a specified commit.
Stashing
Stashing Changes:
git stash: Temporarily shelves changes in the working directory that are not ready to be committed.
Applying Stashes:

git stash pop: Applies stashed changes and removes them from the stash list.
Undoing Changes
Resetting Changes:

git reset <commit>: Moves the current branch pointer to a specified commit, optionally modifying the staging area and working directory.
Reverting Changes:

git revert <commit>: Creates a new commit that undoes the changes from a specified commit.
Removing Files:

git rm <file>: Removes a file from the working directory and stages the removal.
Renaming Files:

git mv <oldname> <newname>: Renames a file and stages the change.
